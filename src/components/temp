import axios from 'axios';
import React, { useState } from 'react';
import { BASE_URL } from '../utils/constants';

const NewFeedCard = ({ user }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [actionTaken, setActionTaken] = useState(null);
  const [isAnimating, setIsAnimating] = useState(false);
  const { _id, photoUrl, firstName, lastName, skills, gender, age, description } = user;
  
  const handleInterested = async (userId) => {
    try {
      setIsLoading(true);
      setIsAnimating('interested');
      setTimeout(() => {
        setIsAnimating(false);
      }, 800);
      await axios.post(`${BASE_URL}/request/interested/${userId}`, {}, { withCredentials: true });
      setActionTaken('interested');
    } catch (err) {
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleIgnored = async (userId) => {
    try {
      setIsLoading(true);
      setIsAnimating('ignored');
      setTimeout(() => {
        setIsAnimating(false);
      }, 800);
      await axios.post(`${BASE_URL}/request/ignored/${userId}`, {}, { withCredentials: true });
      setActionTaken('ignored');
    } catch (err) {
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  // Dynamic animation classes
  const animationClass = isAnimating === 'interested' 
    ? 'animate-pulse bg-green-100 dark:bg-green-900/30' 
    : isAnimating === 'ignored' 
      ? 'animate-pulse bg-red-100 dark:bg-red-900/30' 
      : '';

  return (
    <div className={`relative w-full max-w-xs sm:max-w-sm mx-auto rounded-2xl overflow-hidden 
      bg-white dark:bg-gray-800 shadow-xl transition-all duration-500 
      ${animationClass}`}>
      
      {/* Profile Image - Vertical */}
      <div className="w-full h-80 relative overflow-hidden">
        <img
          src={photoUrl || 'https://via.placeholder.com/400x600'}
          alt={`${firstName}'s profile`}
          className="w-full h-full object-cover transition-transform duration-700 hover:scale-105"
        />
        
        {/* Gender indicator as a stylish overlay in corner */}
        <div className={`absolute top-0 left-0 w-full h-1 
          ${gender === 'male' ? 'bg-blue-500' : 'bg-pink-500'}`}>
        </div>
        
        {/* Gradient overlay for text readability */}
        <div className="absolute inset-0 bg-gradient-to-t from-black via-transparent to-transparent opacity-70"></div>
        
        {/* Profile info overlay - positioned at bottom of image */}
        <div className="absolute bottom-0 left-0 w-full p-4 text-white">
          <h2 className="text-xl font-bold tracking-tight drop-shadow-md">
            {firstName} {lastName}
          </h2>
          <div className="flex items-center space-x-2 mt-1">
            <span className="bg-black/30 backdrop-blur-sm px-2 py-0.5 rounded-full text-sm">
              {age} yrs
            </span>
            <span className={`px-2 py-0.5 rounded-full text-sm
              ${gender === 'male' ? 'bg-blue-500/80' : 'bg-pink-500/80'}`}>
              {gender}
            </span>
          </div>
        </div>
      </div>
      
      {/* Card Body */}
      <div className="p-4">
        {/* Skills with animated reveal on hover */}
        {skills && skills.length > 0 && (
          <div className="flex flex-wrap gap-1.5 mb-3 transition-all duration-300 group">
            {skills.map((skill, index) => (
              <span 
                key={index} 
                className="px-2.5 py-1 text-xs font-medium rounded-full 
                  bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-200
                  transform transition-all duration-300 hover:scale-105 hover:shadow-md
                  group-hover:translate-y-0 translate-y-0">
                {skill}
              </span>
            ))}
          </div>
        )}
        
        {/* Description */}
        <p className="text-sm text-gray-600 dark:text-gray-300 line-clamp-3 mb-4">
          {description}
        </p>
        
        {/* Action Buttons - with ripple effect animation */}
        <div className="grid grid-cols-2 gap-2 mt-2">
          <button 
            onClick={() => !actionTaken && !isLoading && handleInterested(_id)}
            disabled={isLoading || actionTaken}
            className={`relative overflow-hidden rounded-lg py-2.5 px-4 font-medium text-white
              ${actionTaken === 'interested' 
                ? 'bg-green-600 dark:bg-green-700' 
                : 'bg-green-500 hover:bg-green-600 dark:bg-green-600 dark:hover:bg-green-700'}
              ${isLoading ? 'opacity-70' : ''} 
              ${actionTaken && actionTaken !== 'interested' ? 'opacity-50' : ''}`}>
            <span className="relative z-10">
              {isLoading && isAnimating === 'interested' ? '...' : 
               actionTaken === 'interested' ? '✓' : 'Interested'}
            </span>
            {/* Ripple effect div */}
            {isAnimating === 'interested' && (
              <span className="absolute inset-0 flex justify-center items-center">
                <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-green-400 opacity-75"></span>
              </span>
            )}
          </button>
          
          <button 
            onClick={() => !actionTaken && !isLoading && handleIgnored(_id)}
            disabled={isLoading || actionTaken}
            className={`relative overflow-hidden rounded-lg py-2.5 px-4 font-medium
              ${actionTaken === 'ignored' 
                ? 'bg-red-600 dark:bg-red-700 text-white' 
                : 'bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600'}
              ${isLoading ? 'opacity-70' : ''} 
              ${actionTaken && actionTaken !== 'ignored' ? 'opacity-50' : ''}`}>
            <span className="relative z-10">
              {isLoading && isAnimating === 'ignored' ? '...' : 
               actionTaken === 'ignored' ? '✓' : 'Ignore'}
            </span>
            {/* Ripple effect div */}
            {isAnimating === 'ignored' && (
              <span className="absolute inset-0 flex justify-center items-center">
                <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>
              </span>
            )}
          </button>
        </div>
      </div>

      {/* Status indicator - only visible after action */}
      {actionTaken && (
        <div className={`absolute top-3 right-3 w-8 h-8 rounded-full flex items-center justify-center text-white
          ${actionTaken === 'interested' ? 'bg-green-500' : 'bg-red-500'}`}>
          {actionTaken === 'interested' ? '✓' : '×'}
        </div>
      )}
    </div>
  );
};

export default NewFeedCard;